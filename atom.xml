<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Viviairy.github.io</id>
    <title>Vivi的博客</title>
    <updated>2021-05-04T16:02:03.844Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Viviairy.github.io"/>
    <link rel="self" href="https://Viviairy.github.io/atom.xml"/>
    <subtitle>vivi</subtitle>
    <logo>https://Viviairy.github.io/images/avatar.png</logo>
    <icon>https://Viviairy.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Vivi的博客</rights>
    <entry>
        <title type="html"><![CDATA[通俗易懂数据库 | 概念篇]]></title>
        <id>https://Viviairy.github.io/post/shu-ju-ku-ji-ben-zhi-shi-hui-zong/</id>
        <link href="https://Viviairy.github.io/post/shu-ju-ku-ji-ben-zhi-shi-hui-zong/">
        </link>
        <updated>2021-05-04T09:00:36.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>我们经常会听到数据库这个词，具体什么时候会用到数据库呢？<br>
教材一般会用最常见的学生学籍管理系统、教务管理系统举例子，除此之外课程设计选题还有图书借阅管理系统、人事管理系统之类。任何一个多用户的应用背后都有强大的数据库系统支持。<br>
我的这个博客是一个静态的网页，除我之外其他用户都只能浏览文章，不能进行其他交互操作，页面相关的数据都存储在我本地，没有涉及到数据库。 但如果我在CSDN网站发表这篇文章, 大家除了从我主页浏览到网站之外，还可以登录自己的账号进行收藏、评论、点赞等操作，这里CSDN就是一个动态的网页，可以有大量不同的用户，需要很多动态交互信息，这时候就需要数据库来存储用户数据。<br>
这篇博客会带你系统地梳理清楚数据库相关的概念。</p>
</blockquote>
<p>开始之前现先来理解一下最最基本的几个概念</p>
<ul>
<li><strong>数据（Date）</strong>
<ul>
<li>数据是描述事物的记录。</li>
<li>数据和语义是不可分的，也就是说，给出数据的时候需要解释数据的意义，比如说小明某数据18，那这个18是代表年龄还是尺寸这得讲清楚</li>
<li>数据的形式可以是多种多样的，除了文字、数字还有图形、音频、视频等等，它们都可以经过数字化后存入计算机</li>
</ul>
</li>
<li><strong>数据库（DateBase , DB）</strong>
<ul>
<li>即为用于存储数据的仓库</li>
<li>长期存储在计算机内、有组织、可共享的大量数据集合，这个也是数据库的基本特征</li>
</ul>
</li>
<li><strong>数据库管理系统（DateBase Management System,DBMS）</strong>
<ul>
<li>即为位于用户和操作系统之间的一层数据管理软件</li>
<li>常见的有AB的MySQL，微软的SQL Server，甲骨文的Oracle等，感兴趣的自行慢慢了解</li>
</ul>
</li>
<li><strong>数据库系统（DateBaseSystem,DBS）</strong>
<ul>
<li>就是一个使用、管理、存储数据的系统，包括数据库、硬件、软件、人员<br>
<img src="https://Viviairy.github.io/post-images/1620118877088.png" alt="" loading="lazy"></li>
<li>这里还涉及到数据库系统的三级模式结构和二级映射<br>
<img src="https://Viviairy.github.io/post-images/1620139711329.png" alt="" loading="lazy"></li>
</ul>
</li>
</ul>
<blockquote>
<p>构建数据库其实就是一个建模的过程。<br>
1）首先对现实世界进行分析，将客观对象抽象为某一信息结构（即<strong>概念模型</strong>）<br>
2）再把概念模型转换到计算机上某一DBMS支持的<strong>数据模型</strong>。</p>
</blockquote>
<h1 id="概念模型">概念模型</h1>
<p>所谓的概念模型就是从现实世界抽象出来的信息结构，相关的概念很多但也很好理解</p>
<ol>
<li>实体（entity）
<ul>
<li>可以是具体的人事物，也可以看作是一个概念，比如说lol英雄</li>
</ul>
</li>
<li>属性（attribute）
<ul>
<li>属性就是实体所具有的特性，一个实体可以用若干属性来刻画</li>
<li>lol英雄实体可以由名称、性别、英雄定位、生命值、法力值等属性组合</li>
<li>这时属性集合（九尾狐妖，女，法师，526，418）代表了这一个lol英雄</li>
</ul>
</li>
<li>码（key）
<ul>
<li>可以唯一标识的属性集合</li>
<li>例如名称可以是lol英雄实体的码，但是如果是HDU学生实体，就不能用姓名作为码因为学生很多可能重名，这时候就需要学号作为学生实体的码</li>
</ul>
</li>
<li>实体型（entity type）
<ul>
<li>就是实体名+属性名集合</li>
<li>例如：lol英雄（名称、性别、英雄定位、生命值、法力值）</li>
</ul>
</li>
<li>实体集（entity set）
<ul>
<li>同一类型实体的集合，例如全体英雄</li>
</ul>
</li>
<li>联系（relationship）
<ul>
<li>可以先理解现实世界中各个实体之间存在的关系</li>
<li>实体之间的联系可以是一对一（比如正常情况的男女朋友交往），一对多（比如说lol账号和账号下拥有的lol英雄），多对多（比如玩家和游戏）</li>
</ul>
</li>
</ol>
<h2 id="概念结构设计">概念结构设计</h2>
<p><strong>E-R（Entity-Relationship）</strong><br>
在抽象现实世界概念模型的时候通常用<strong>E-R图</strong>来标识实体关系，<br>
E-R图表示了实体型（矩形）、属性（椭圆）和联系（菱形），<br>
看下面这个栗子就明白了<br>
<img src="https://Viviairy.github.io/post-images/1620118890244.png" alt="" loading="lazy"></p>
<h1 id="关系数据库">关系数据库</h1>
<p>顾名思义就是支持<strong>关系模式</strong>的数据库系统。<br>
首先关系模型是数据模型的一种，所谓<strong>数据模型</strong>是用来描述数据、组织数据和用来对数据进行操作的。数据库常见的数据模型有层次模型（树形结构）、网状模型、关系模型等，前两种已经基本被淘汰了 ,不多做介绍感兴趣的自己去了解吧。<br>
关系模式由  A 关系数据结构、B 关系操作集合和 C 关系完整性约束三部分组成，接下来会展开介绍</p>
<h2 id="a-关系数据结构">A 关系数据结构</h2>
<p>一句话概括讲清楚关系模式就是：用<strong>表</strong>来表示关系，<br>
以下是关系模型的一些术语：</p>
<ol>
<li>关系（relation）
<ul>
<li>一个关系对应通常说的一张表</li>
</ul>
</li>
<li>属性（attribute）
<ul>
<li>表中的一列，列名就是属性名</li>
<li>相关的概念有主属性、非主属性</li>
</ul>
</li>
<li>元组（tuple）
<ul>
<li>表的某一行（即数据库中的每条记录），可以描述一个具体的事物</li>
</ul>
</li>
<li>码 （key）
<ul>
<li>相关的概念还有主码、外码、候选码，之后再解释</li>
</ul>
</li>
<li>域（domain）
<ul>
<li>属性的取值范围来自某个域，比如性别的域一般来说就是（男，女）</li>
</ul>
</li>
<li>分量：元组中的一个属性值<br>
关系模式要求是必须规范化，涉及规范化问题在后面会介绍</li>
</ol>
<h2 id="b-关系操作集合">B 关系操作集合</h2>
<p>基本关系操作包括<br>
1）查询操作<br>
查询操作分为选择、投影、连接、除、差、并、交、笛卡尔积<br>
2）增删改操作<br>
关系操作涉及到的关系数据库标准语言SQL会下一篇博客详细介绍。</p>
<h2 id="c-数据完整性约束">C 数据完整性约束</h2>
<p>数据完整性就是指数据的正确性和相容性（符合逻辑），又分为实体完整性、参照完整性、用户自定义完整性</p>
<ol>
<li>实体完整性：<br>
主码唯一且不为空</li>
<li>参照完整性：<br>
不允许引用不存在的实体。参照表插入某条记录，这条记录的外码在被参照表中必须存在</li>
<li>用户自定义完整性：<br>
由用户自定义的数据约束。比如性别只能用男、女表示，人的年龄在0-120之间。常见的用户自定义完整性有NOT NULL，UNIQUE，CHECK等</li>
</ol>
<p>#关系数据理论</p>
<h2 id="关于规范化">关于规范化</h2>
<p>这块是数据库的难点和也是重点，比较抽象，那就直接上个栗子理解吧<br>
函数依赖</p>
<p>候选码:可唯一标识某一元组的属性组，属性组中各个属性缺一不可。【t_student】（学号，姓名，学院），姓名可能会重复，所以其中学号可以唯一标识一条记录，学号就是t_student的候选码。那么假设姓名不会重复，那么候选码就有学号和姓名两个。 又比如【t_grade】（学号，课程，成绩），其中一个学生可以有多条成绩记录，所以需要学号和课程号组合才可以唯一标识一条数据库记录，所以学号、课程号就是t_student的一个候选码。<br>
超码：只要一个属性组可以唯一标识一个元组，那么就说这个属性组是超码 【t_student】（学号，姓名，学院），姓名可能会重复，所以（学号）是一个超码同时也是候选码，（学号，姓名）可唯一标识一个元组，所以其也是超码，但不是候选码，因为少了姓名也可以唯一标识。</p>
<p>主属性：候选码中的属性称为主属性。【t_student】（学号，姓名，学院），学号就是主属性<br>
非主属性：不是主属性就是非主属性呗。【t_student】（学号，姓名，学院），姓名、学院就是非主属性</p>
<p>全码：极端情况下表的所有属性组成该表的候选码，则称为全码</p>
<p>主键/主码：primary key，一个表可能有多个，往往选中一个作为主键<br>
外键/外码：foreign key，假设表A的某个属性attr是另一表B中的主码，且A和B有某种联系，则称attr是外码</p>
<p>参照表：外码所在的表<br>
被参照表：外码所引用（foreign key references）的表</p>
<h2 id="数据依赖公理系统">数据依赖公理系统</h2>
<h1 id="数据库恢复技术">数据库恢复技术</h1>
<p>事务的概念<br>
故障种类<br>
恢复技术<br>
数据转储<br>
登录日志</p>
<h1 id="数据库并发控制">数据库并发控制</h1>
<p>封锁<br>
封锁协议<br>
并发控制</p>
]]></content>
    </entry>
</feed>